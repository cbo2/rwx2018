Programming with JavaScript - Method to Madness
Venkat Subramaniam
venkats@agiledeveloper.com
@venkat_s

Access to Repository:
URL: https://www.agiledeveloper.com/svn/code/rwx2018ws
Userid: rwx2018ws
Password: rwxclear

Getting the Feet Wet:
-What's wrong with JavaScript?
-What's good about it?
-; is really not optional
-use === instead of ==
-the mess of var
-use option strict
-no block scope with var
-quit using var
-let
-differences between let and var
	-can't redefine
  -provides block scope
-const
-know what is really const
-making the object a constant
-writing functions
-Exercise

Diving into JavaScript:
-default parameters
 -sending value
 -sending no value
 -sending undefined
 -where can they appear
 -using parameters in default parameters
-arguments
 -powerful
 -yet, not expressive
-rest operator
-rest only one and only last
-spread
-this context object
-attaching an arbitrary function to an object
-associating an arbitrary object as context using call
-apply
-bind - partially applied function
-arrow functions
-benefits
-avoid multiline arrow functions
-semantical differences
-this and arguments
-higher-order functions
-looping
-looping with index
-template literals
-multiline strings
-Exercise

Modern JavaScript:
-enhanced object literals
-symbols
	-Symbol.for('....');
	-Symbol.keyFor(...);
	-[property]: '...'
	-wont show up in properties
	-visible through getOwnPropertySymbols	
-lazy iterators
 evens = { [Symbol.iteartor]() {
  return { next() { ... return {done: false, value: ...}}
	for(let i of evens) ... break ...
-generators
 -using *[symbol.iterator]
		* [Symbol.iterator]() { ... while(true) yield ... }
 -using * functions
-collections
-destructuring
 - assigning multiple values
 - skipping values
 - default values
 - JSON
 -same names
 -reaching in
 -field collisions
 -passing JSON
-Exercise